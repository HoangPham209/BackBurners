{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { server } from \"./index\";\nimport axios from 'axios';\nvar SENDPUBLICTOK = 'SENDPUBLICTOK';\n\nvar sendPublicToken = function sendPublicToken(token) {\n  return {\n    type: SENDPUBLICTOK,\n    token: token\n  };\n};\n\nvar axiosConfig = {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n};\nexport var sendTok = function sendTok(token, userId) {\n  return function _callee(dispatch) {\n    var resp;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.post(server + \"/api/plaid/plaidExchange\", {\n              public_token: token,\n              id: userId\n            }, axiosConfig));\n\n          case 3:\n            resp = _context.sent;\n            console.log(resp.data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('Error sending public token: ', _context.t0.message);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nvar initialToken = [];\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialToken;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SENDPUBLICTOK:\n      return action.token;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/bbridges11/Desktop/BackBurners/BackBurners/client/src/store/token.js"],"names":["server","axios","SENDPUBLICTOK","sendPublicToken","token","type","axiosConfig","headers","sendTok","userId","dispatch","post","public_token","id","resp","console","log","data","message","initialToken","state","action"],"mappings":";AAAA,SAASA,MAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,aAAa,GAAG,eAAtB;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEH,aAAR;AAAuBE,IAAAA,KAAK,EAALA;AAAvB,GAAL;AAAA,CAA7B;;AAEA,IAAIE,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAE;AACP,mCAA+B;AADxB;AADO,CAAlB;AAMA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACJ,KAAD,EAAQK,MAAR,EAAmB;AACxC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEgBT,KAAK,CAACU,IAAN,CAAcX,MAAd,+BAA+C;AAACY,cAAAA,YAAY,EAAER,KAAf;AAAsBS,cAAAA,EAAE,EAAEJ;AAA1B,aAA/C,EAAkFH,WAAlF,CAFhB;;AAAA;AAEGQ,YAAAA,IAFH;AAGHC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,IAAjB;AAHG;AAAA;;AAAA;AAAA;AAAA;AAMHF,YAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C,YAAIE,OAAhD;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD,CAVM;AAYP,IAAMC,YAAY,GAAG,EAArB;AAEA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBD,YAAyB;AAAA,MAAXE,MAAW;;AAC/C,UAAQA,MAAM,CAAChB,IAAf;AACE,SAAKH,aAAL;AACE,aAAOmB,MAAM,CAACjB,KAAd;;AACF;AACE,aAAOgB,KAAP;AAJJ;AAMD,CAPD","sourcesContent":["import { server } from './index';\nimport axios from 'axios'\n// Action Types\nconst SENDPUBLICTOK = 'SENDPUBLICTOK';\n\n// Action Creators\nconst sendPublicToken = token => ({ type: SENDPUBLICTOK, token });\n\nlet axiosConfig = {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n  }\n}\n\nexport const sendTok = (token, userId) => {\n  return async dispatch => {\n    try {\n      const resp = await axios.post(`${server}/api/plaid/plaidExchange`,{public_token: token, id: userId}, axiosConfig)\n      console.log(resp.data)\n      //dispatch(sendPublicToken(resp.data));\n    } catch (err) {\n      console.log('Error sending public token: ', err.message);\n    }\n  };\n};\n\nconst initialToken = [];\n\nexport default (state = initialToken, action) => {\n  switch (action.type) {\n    case SENDPUBLICTOK:\n      return action.token;\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}