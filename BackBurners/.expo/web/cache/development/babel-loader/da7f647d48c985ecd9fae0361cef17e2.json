{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Hoang's pc\\\\Desktop\\\\BackBurners\\\\BackBurners\\\\client\\\\src\\\\Components\\\\Analytics\\\\index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { createStackNavigator } from 'react-navigation-stack';\nimport * as path from 'svg-path-properties';\nimport * as shape from 'd3-shape';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Svg, { Path } from 'react-native-svg';\nimport * as d3 from 'd3';\nimport { ART } from \"react-native-web/dist/index\";\nvar Surface = ART.Surface,\n    Group = ART.Group,\n    Shape = ART.Shape;\nimport { LineChart, BarChart, PieChart, ProgressChart, ContributionGraph, StackedBarChart } from 'react-native-chart-kit';\nimport { blue100, yellow300, green50 } from 'react-native-paper/lib/typescript/src/styles/colors';\nimport { gray } from 'd3';\nvar userPurchases = [{\n  itemName: 'Drinks',\n  price: 20,\n  color: gray\n}, {\n  itemName: 'Clothing',\n  price: 50,\n  color: rgb(255, 153, 51)\n}, {\n  itemName: 'Snacks',\n  price: 60,\n  color: rgb(255, 0, 255)\n}, {\n  itemName: 'Transportation',\n  price: 56,\n  color: yellow300\n}, {\n  itemName: 'Groceries',\n  price: 100,\n  color: blue100\n}, {\n  itemName: 'Electronics',\n  price: 15,\n  color: red20\n}, {\n  itemName: 'Dining Out',\n  price: 16,\n  color: green50\n}];\nthis.arcGenerator = d3.shape.pie().outerRadius(100).padAngle(0).innerRadius(0);\nthis.arcs = d3.shape.pie().value(function (item) {\n  return item.number;\n}).startAngle(0).endAngle(2 * Math.PI)(userPurchases);\n\ncreatePieSlice = function createPieSlice(index) {\n  var arcData = _this.arcs[index];\n  return _this.arcGenerator(arcData);\n};\n\nvar Analytics = function (_Component) {\n  _inherits(Analytics, _Component);\n\n  var _super = _createSuper(Analytics);\n\n  function Analytics() {\n    _classCallCheck(this, Analytics);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Analytics, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }, \"Current Budget\"), React.createElement(Svg, {\n        width: \"300\",\n        height: \"200\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      }, userPurchases.map(function (item, index) {\n        return React.createElement(Path, {\n          fill: item.color,\n          d: _this2.createPieSlice(index),\n          key: 'pie_slice_' + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 21\n          }\n        });\n      })));\n    }\n  }]);\n\n  return Analytics;\n}(Component);\n\nvar styles = StyleSheet.create({});\nvar AnalyticsConnect = connect(mapState, mapDispatch)(Analytics);\nexport default AnalyticsConnect;\nexport var AnalyticsScreen = createStackNavigator({\n  Home: {\n    screen: AnalyticsConnect\n  }\n});","map":{"version":3,"sources":["C:/Users/Hoang's pc/Desktop/BackBurners/BackBurners/client/src/Components/Analytics/index.js"],"names":["React","Component","connect","createStackNavigator","path","shape","Svg","Path","d3","ART","Surface","Group","Shape","LineChart","BarChart","PieChart","ProgressChart","ContributionGraph","StackedBarChart","blue100","yellow300","green50","gray","userPurchases","itemName","price","color","rgb","red20","arcGenerator","pie","outerRadius","padAngle","innerRadius","arcs","value","item","number","startAngle","endAngle","Math","PI","createPieSlice","index","arcData","Analytics","map","styles","StyleSheet","create","AnalyticsConnect","mapState","mapDispatch","AnalyticsScreen","Home","screen"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Text, View, TouchableOpacity, StyleSheet, ScrollView, Image, Dimensions } from 'react-native';\r\nimport { createStackNavigator } from 'react-navigation-stack';\r\nimport * as path from 'svg-path-properties';\r\nimport * as shape from 'd3-shape';\r\n/*import React from 'react'*/\r\nimport { Animated } from 'react-native'\r\nimport Svg, { Path } from 'react-native-svg'\r\nimport * as d3 from 'd3'\r\nimport { ART } from 'react-native'\r\nconst { Surface, Group, Shape } = ART\r\n\r\nimport {\r\n    LineChart,\r\n    BarChart,\r\n    PieChart,\r\n    ProgressChart,\r\n    ContributionGraph,\r\n    StackedBarChart\r\n} from 'react-native-chart-kit'\r\nimport { blue100, yellow300, green50 } from 'react-native-paper/lib/typescript/src/styles/colors';\r\nimport { gray } from 'd3';\r\n\r\n\r\n\r\n/*const lineCha = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n    datasets: [\r\n        {\r\n            data: [Math.random() * 100,\r\n                Math.random() * 100,\r\n                Math.random() * 100,\r\n                Math.random() * 100,\r\n                Math.random() * 100,\r\n                Math.random() * 100],\r\n            strokeWidth: 2, // optional\r\n        },\r\n    ],\r\n};\r\n\r\nconst pieData = [\r\n    {\r\n        name: \"Seoul\",\r\n        population: 21500000,\r\n        color: \"rgba(131, 167, 234, 1)\",\r\n        legendFontColor: \"#7F7F7F\",\r\n        legendFontSize: 15\r\n    },\r\n    {\r\n        name: \"Toronto\",\r\n        population: 2800000,\r\n        color: \"#F00\",\r\n        legendFontColor: \"#7F7F7F\",\r\n        legendFontSize: 15\r\n    },\r\n    {\r\n        name: \"Beijing\",\r\n        population: 527612,\r\n        color: \"red\",\r\n        legendFontColor: \"#7F7F7F\",\r\n        legendFontSize: 15\r\n    },\r\n    {\r\n        name: \"New York\",\r\n        population: 8538000,\r\n        color: \"#ffffff\",\r\n        legendFontColor: \"#7F7F7F\",\r\n        legendFontSize: 15\r\n    },\r\n    {\r\n        name: \"Moscow\",\r\n        population: 11920000,\r\n        color: \"rgb(0, 0, 255)\",\r\n        legendFontColor: \"#7F7F7F\",\r\n        legendFontSize: 15\r\n    }\r\n];*/\r\n\r\nconst userPurchases = [\r\n    {\r\n        itemName: 'Drinks',\r\n        price: 20,\r\n        color: gray\r\n    },\r\n    {\r\n        itemName: 'Clothing',\r\n        price: 50,\r\n        color: rgb(255, 153, 51)\r\n    },\r\n    {\r\n        itemName: 'Snacks',\r\n        price: 60,\r\n        color: rgb(255, 0, 255)\r\n    },\r\n    {\r\n        itemName: 'Transportation',\r\n        price: 56,\r\n        color: yellow300\r\n    },\r\n    {\r\n        itemName: 'Groceries',\r\n        price: 100,\r\n        color: blue100\r\n    },\r\n    {\r\n        itemName: 'Electronics',\r\n        price: 15,\r\n        color: red20\r\n    },\r\n    {\r\n        itemName: 'Dining Out',\r\n        price: 16,\r\n        color: green50\r\n    }\r\n]\r\n\r\nthis.arcGenerator = d3.shape.pie()\r\n    .outerRadius(100)\r\n    .padAngle(0)\r\n    .innerRadius(0)\r\n\r\nthis.arcs = d3.shape.pie()\r\n    .value( (item) => item.number)\r\n    .startAngle(0)\r\n    .endAngle(2 * Math.PI)\r\n    (userPurchases)\r\n\r\ncreatePieSlice = (index) => {\r\n    let arcData = this.arcs[index];\r\n    return this.arcGenerator(arcData);\r\n}\r\n\r\n/*const anim = new Animated.Value(0)\r\nAnimated.timing(anim, {toValue: 1}).start()*/\r\n\r\nclass Analytics extends Component {\r\n  render() {\r\n    return(\r\n      <View>\r\n            <Text>Current Budget</Text>\r\n            <Svg width=\"300\" height=\"200\">\r\n                {userPurchases.map((item, index) =>\r\n                    <Path\r\n                        fill={item.color}\r\n                        d={this.createPieSlice(index)}\r\n                        key={'pie_slice_' + index}\r\n                    />\r\n                    )}\r\n            </Svg>\r\n           \r\n      </View>\r\n    );\r\n  }\r\n}\r\n //styles.classname <Text style={styles.buttontext}>Login</Text>\r\n/* <PieChart\r\n                data={pieData}\r\n                width={screenWidth}\r\n                height={220}\r\n                chartConfig={chartConfig}\r\n                accessor=\"population\"\r\n                backgroundColor=\"transparent\"\r\n                paddingLeft=\"15\"\r\n                absolute\r\n            />\r\n\r\n            <LineChart\r\n                data={lineCha.data}\r\n                width={Dimensions.get('window').width} // from react-native\r\n                height={220}\r\n                yAxisLabel={'$'}\r\n                chartConfig={{\r\n                    backgroundColor: '#F1FFF1',\r\n                    backgroundGradientFrom: '#fb8c00',\r\n                    backgroundGradientTo: '#ffa726',\r\n                    //decimalPlaces: 2, // optional, defaults to 2dp\r\n                    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                    style: {\r\n                        borderRadius: 16\r\n                    }\r\n                }}\r\n                bezier\r\n                style={{\r\n                    marginVertical: 8,\r\n                    borderRadius: 16\r\n                }}/>*/\r\n\r\n/*const mapState = state => {\r\n  return {\r\n    \r\n  };\r\n};\r\n\r\nconst mapDispatch = dispatch => {\r\n  return {\r\n    \r\n  };\r\n};*/\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n}) \r\n\r\nconst AnalyticsConnect = connect(mapState,mapDispatch)(Analytics);\r\n\r\nexport default AnalyticsConnect;\r\n\r\nexport const AnalyticsScreen = createStackNavigator({ Home: { screen: AnalyticsConnect }});"]},"metadata":{},"sourceType":"module"}