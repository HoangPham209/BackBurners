{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hoang's pc\\\\Desktop\\\\BackBurners\\\\BackBurners\\\\client\\\\src\\\\Components\\\\Analytics\\\\index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { LineChart, BarChart, PieChart, ProgressChart, ContributionGraph, StackedBarChart } from 'react-native-chart-kit';\nvar line = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n  datasets: [{\n    data: [20, 45, 28, 80, 99, 43],\n    strokeWidth: 2\n  }]\n};\n\nvar Analytics = function (_Component) {\n  _inherits(Analytics, _Component);\n\n  var _super = _createSuper(Analytics);\n\n  function Analytics() {\n    _classCallCheck(this, Analytics);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Analytics, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }, \"Current Budget\"), React.createElement(LineChart, {\n        data: linedata,\n        width: Dimensions.get('window').width,\n        height: 220,\n        yAxisLabel: '$',\n        chartConfig: {\n          backgroundColor: '#F1FFF1',\n          backgroundGradientFrom: '#fb8c00',\n          backgroundGradientTo: '#ffa726',\n          decimalPlaces: 2,\n          color: function color() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n            return \"rgba(255, 255, 255, \" + opacity + \")\";\n          },\n          style: {\n            borderRadius: 16\n          }\n        },\n        bezier: true,\n        style: {\n          marginVertical: 8,\n          borderRadius: 16\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return Analytics;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {};\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {};\n};\n\nvar AnalyticsConnect = connect(mapState, mapDispatch)(Analytics);\nexport default AnalyticsConnect;\nexport var AnalyticsScreen = createStackNavigator({\n  Home: {\n    screen: AnalyticsConnect\n  }\n});","map":{"version":3,"sources":["C:/Users/Hoang's pc/Desktop/BackBurners/BackBurners/client/src/Components/Analytics/index.js"],"names":["React","Component","connect","createStackNavigator","LineChart","BarChart","PieChart","ProgressChart","ContributionGraph","StackedBarChart","line","labels","datasets","data","strokeWidth","Analytics","linedata","Dimensions","get","width","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","style","borderRadius","marginVertical","mapState","state","mapDispatch","dispatch","AnalyticsConnect","AnalyticsScreen","Home","screen"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;;;;;;;AAEA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SACIC,SADJ,EAEIC,QAFJ,EAGIC,QAHJ,EAIIC,aAJJ,EAKIC,iBALJ,EAMIC,eANJ,QAOO,wBAPP;AASA,IAAMC,IAAI,GAAG;AACTC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,CADC;AAETC,EAAAA,QAAQ,EAAE,CACN;AACIC,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CADV;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GADM;AAFD,CAAb;;IAUMC,S;;;;;;;;;;;;;6BACK;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEM,oBAAC,SAAD;AACI,QAAA,IAAI,EAAEC,QADV;AAEI,QAAA,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAFpC;AAGI,QAAA,MAAM,EAAE,GAHZ;AAII,QAAA,UAAU,EAAE,GAJhB;AAKI,QAAA,WAAW,EAAE;AACTC,UAAAA,eAAe,EAAE,SADR;AAETC,UAAAA,sBAAsB,EAAE,SAFf;AAGTC,UAAAA,oBAAoB,EAAE,SAHb;AAITC,UAAAA,aAAa,EAAE,CAJN;AAKTC,UAAAA,KAAK,EAAE;AAAA,gBAACC,OAAD,uEAAW,CAAX;AAAA,4CAAwCA,OAAxC;AAAA,WALE;AAMTC,UAAAA,KAAK,EAAE;AACHC,YAAAA,YAAY,EAAE;AADX;AANE,SALjB;AAeI,QAAA,MAAM,MAfV;AAgBI,QAAA,KAAK,EAAE;AACHC,UAAAA,cAAc,EAAE,CADb;AAEHD,UAAAA,YAAY,EAAE;AAFX,SAhBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFN,CADF;AAyBD;;;;EA3BqB1B,S;;AA8BxB,IAAM4B,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,SAAO,EAAP;AAGD,CAJD;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC9B,SAAO,EAAP;AAGD,CAJD;;AAMA,IAAMC,gBAAgB,GAAG/B,OAAO,CAAC2B,QAAD,EAAUE,WAAV,CAAP,CAA8BhB,SAA9B,CAAzB;AAEA,eAAekB,gBAAf;AAEA,OAAO,IAAMC,eAAe,GAAG/B,oBAAoB,CAAC;AAAEgC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,MAAM,EAAEH;AAAV;AAAR,CAAD,CAA5C","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Text, View, TouchableOpacity, StyleSheet, ScrollView, Image, Dimensions } from 'react-native';\r\nimport { createStackNavigator } from 'react-navigation-stack';\r\nimport {\r\n    LineChart,\r\n    BarChart,\r\n    PieChart,\r\n    ProgressChart,\r\n    ContributionGraph,\r\n    StackedBarChart\r\n} from 'react-native-chart-kit'\r\n\r\nconst line = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n    datasets: [\r\n        {\r\n            data: [20, 45, 28, 80, 99, 43],\r\n            strokeWidth: 2, // optional\r\n        },\r\n    ],\r\n};\r\n\r\nclass Analytics extends Component {\r\n  render() {\r\n    return(\r\n      <View>\r\n        <Text>Current Budget</Text>\r\n            <LineChart\r\n                data={linedata}\r\n                width={Dimensions.get('window').width} // from react-native\r\n                height={220}\r\n                yAxisLabel={'$'}\r\n                chartConfig={{\r\n                    backgroundColor: '#F1FFF1',\r\n                    backgroundGradientFrom: '#fb8c00',\r\n                    backgroundGradientTo: '#ffa726',\r\n                    decimalPlaces: 2, // optional, defaults to 2dp\r\n                    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                    style: {\r\n                        borderRadius: 16\r\n                    }\r\n                }}\r\n                bezier\r\n                style={{\r\n                    marginVertical: 8,\r\n                    borderRadius: 16\r\n                }}/>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapState = state => {\r\n  return {\r\n    \r\n  };\r\n};\r\n\r\nconst mapDispatch = dispatch => {\r\n  return {\r\n    \r\n  };\r\n};\r\n\r\nconst AnalyticsConnect = connect(mapState,mapDispatch)(Analytics);\r\n\r\nexport default AnalyticsConnect;\r\n\r\nexport const AnalyticsScreen = createStackNavigator({ Home: { screen: AnalyticsConnect }});"]},"metadata":{},"sourceType":"module"}