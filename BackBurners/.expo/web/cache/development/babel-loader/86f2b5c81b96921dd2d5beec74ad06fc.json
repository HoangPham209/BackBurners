{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { server } from \"./index\";\nimport axios from 'axios';\nvar axiosConfig = {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n};\nvar SETACCTTRANSDATA = 'SETACCTTRANSDATA';\nvar CHANGETRANS = 'CHANGETRANS';\n\nvar setAccTransData = function setAccTransData(data) {\n  return {\n    type: SETACCTTRANSDATA,\n    data: data\n  };\n};\n\nvar changeTrans = function changeTrans(transaction) {\n  return {\n    type: CHANGETRANS,\n    transaction: transaction\n  };\n};\n\nexport var getAccTransData = function getAccTransData() {\n  return function _callee(dispatch) {\n    var res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(server + \"/api/accTrans\", axios));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('Error fetching acct & trans data: ', _context.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n};\nexport var updateAccTrans = function updateAccTrans(newTrans) {\n  return function _callee2(dispatch) {\n    var res;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.put(server + \"/api/accTrans/\" + newTrans.id, newTrans, axiosConfig));\n\n          case 3:\n            res = _context2.sent;\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('Error updating transaction: ', _context2.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n};\nvar initialState = {};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SETACCTTRANSDATA:\n      return action.data;\n\n    case CHANGETRANS:\n      return _objectSpread({}, state, {\n        trans: state.trans.map(function (transaction) {\n          if (transaction.id === action.transaction.id) {\n            return action.transaction;\n          } else {\n            return transaction;\n          }\n        })\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/bbridges11/Desktop/BackBurners/BackBurners/client/src/store/accountTransactions.js"],"names":["server","axios","axiosConfig","headers","SETACCTTRANSDATA","CHANGETRANS","setAccTransData","data","type","changeTrans","transaction","getAccTransData","dispatch","get","res","console","log","message","updateAccTrans","newTrans","put","id","initialState","state","action","trans","map"],"mappings":";;;;;;;AAAA,SAASA,MAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,WAAW,GAAG;AACdC,EAAAA,OAAO,EAAE;AACP,mCAA+B;AADxB;AADK,CAAlB;AAOA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,WAAW,GAAG,aAApB;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,IAAI;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEJ,gBAAR;AAA0BG,IAAAA,IAAI,EAAJA;AAA1B,GAAL;AAAA,CAA5B;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAC,WAAW;AAAA,SAAK;AAAEF,IAAAA,IAAI,EAAEH,WAAR;AAAqBK,IAAAA,WAAW,EAAXA;AAArB,GAAL;AAAA,CAA/B;;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACjC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEeX,KAAK,CAACY,GAAN,CAAab,MAAb,oBAAoCC,KAApC,CAFf;;AAAA;AAEGa,YAAAA,GAFH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKHC,YAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkD,YAAIC,OAAtD;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAQH,CATM;AAWP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AACtC,SAAO,kBAAMP,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEmBX,KAAK,CAACmB,GAAN,CAAapB,MAAb,sBAAoCmB,QAAQ,CAACE,EAA7C,EAAmDF,QAAnD,EAA6DjB,WAA7D,CAFnB;;AAAA;AAEOY,YAAAA,GAFP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKCC,YAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C,aAAIC,OAAhD;;AALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAQH,CATM;AAWP,IAAMK,YAAY,GAAG,EAArB;AAEA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBD,YAAyB;AAAA,MAAXE,MAAW;;AAC7C,UAAQA,MAAM,CAAChB,IAAf;AACI,SAAKJ,gBAAL;AACI,aAAOoB,MAAM,CAACjB,IAAd;;AACJ,SAAKF,WAAL;AACI,+BACOkB,KADP;AAEIE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgB,UAAAhB,WAAW,EAAI;AAClC,cAAIA,WAAW,CAACW,EAAZ,KAAmBG,MAAM,CAACd,WAAP,CAAmBW,EAA1C,EAA8C;AAC1C,mBAAOG,MAAM,CAACd,WAAd;AACH,WAFD,MAEO;AACH,mBAAOA,WAAP;AACH;AACJ,SANM;AAFX;;AAUJ;AACI,aAAOa,KAAP;AAfR;AAiBH,CAlBD","sourcesContent":["import { server } from './index';\nimport axios from 'axios'\nlet axiosConfig = {\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n    }\n}\n\n// Action Types\nconst SETACCTTRANSDATA = 'SETACCTTRANSDATA';\nconst CHANGETRANS = 'CHANGETRANS';\n\n// Action Creators\nconst setAccTransData = data => ({ type: SETACCTTRANSDATA, data });\nconst changeTrans = transaction => ({ type: CHANGETRANS, transaction });\n\nexport const getAccTransData = () => {\n    return async dispatch => {\n      try {\n        const res = await axios.get(`${server}/api/accTrans`, axios);\n        //dispatch(setAccTransData(res.data));\n      } catch (err) {\n        console.log('Error fetching acct & trans data: ', err.message);\n      }\n    };\n};\n\nexport const updateAccTrans = newTrans => {\n    return async dispatch => {\n        try {\n            const res = await axios.put(`${server}/api/accTrans/${newTrans.id}`, newTrans, axiosConfig);\n            //dispatch(changeTrans(res.data));\n        } catch (err) {\n            console.log('Error updating transaction: ', err.message);\n        }\n    };\n};\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SETACCTTRANSDATA:\n            return action.data;\n        case CHANGETRANS:\n            return {\n                ...state,\n                trans: state.trans.map(transaction => {\n                    if (transaction.id === action.transaction.id) {\n                        return action.transaction;\n                    } else {\n                        return transaction;\n                    }\n                }),\n            };\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}