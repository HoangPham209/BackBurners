{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { server } from \"./index\";\nimport axios from 'axios';\nvar axiosConfig = {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n};\nvar GETBUDGET = 'GETBUDGET';\nvar UPDATEBUDGET = 'UPDATEBUDGET';\n\nvar getBudgetCreator = function getBudgetCreator(budget) {\n  return {\n    type: GETBUDGET,\n    budget: budget\n  };\n};\n\nvar updateBudgetCreator = function updateBudgetCreator(budget) {\n  return {\n    type: UPDATEBUDGET,\n    budget: budget\n  };\n};\n\nexport var getBudget = function getBudget(userId) {\n  return function _callee(dispatch) {\n    var resp;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.post(server + \"/api/budget/\" + userId, {\n              public_token: token\n            }, axiosConfig));\n\n          case 3:\n            resp = _context.sent;\n            console.log(\"get budget\", resp.data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('Error getting budget: ', _context.t0.message);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var updateBudget = function updateBudget(budget) {\n  return function _callee2(dispatch) {\n    var resp;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.post(server + \"/api/budget\", {\n              budget: budget\n            }, axiosConfig));\n\n          case 3:\n            resp = _context2.sent;\n            console.log(\"update budget\", resp.data);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('Error updating budget: ', _context2.t0.message);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nvar initialState = {};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GETBUDGET:\n      return action.budget;\n\n    case UPDATEBUDGET:\n      return action.budget;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/bbridges11/Desktop/BackBurners/BackBurners/client/src/store/budget.js"],"names":["server","axios","axiosConfig","headers","GETBUDGET","UPDATEBUDGET","getBudgetCreator","budget","type","updateBudgetCreator","getBudget","userId","dispatch","post","public_token","token","resp","console","log","data","message","updateBudget","initialState","state","action"],"mappings":";AAAA,SAASA,MAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,WAAW,GAAG;AACdC,EAAAA,OAAO,EAAE;AACP,mCAA+B;AADxB;AADK,CAAlB;AAOA,IAAMC,SAAS,GAAG,WAAlB;AACA,IAAMC,YAAY,GAAG,cAArB;;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,MAAM;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEJ,SAAR;AAAmBG,IAAAA,MAAM,EAANA;AAAnB,GAAL;AAAA,CAA/B;;AACA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAF,MAAM;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEH,YAAR;AAAsBE,IAAAA,MAAM,EAANA;AAAtB,GAAL;AAAA,CAAlC;;AAEA,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAC,MAAM,EAAI;AACjC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEgBX,KAAK,CAACY,IAAN,CAAcb,MAAd,oBAAmCW,MAAnC,EAA4C;AAACG,cAAAA,YAAY,EAAEC;AAAf,aAA5C,EAAmEb,WAAnE,CAFhB;;AAAA;AAEGc,YAAAA,IAFH;AAGHC,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAAI,CAACG,IAA/B;AAHG;AAAA;;AAAA;AAAA;AAAA;AAMHF,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,YAAIE,OAA1C;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD,CAVM;AAYP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAd,MAAM,EAAI;AACpC,SAAO,kBAAMK,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEgBX,KAAK,CAACY,IAAN,CAAcb,MAAd,kBAAmC;AAACO,cAAAA,MAAM,EAAEA;AAAT,aAAnC,EAAqDL,WAArD,CAFhB;;AAAA;AAEGc,YAAAA,IAFH;AAGHC,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,IAAI,CAACG,IAAlC;AAHG;AAAA;;AAAA;AAAA;AAAA;AAMHF,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,aAAIE,OAA3C;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD,CAVM;AAYP,IAAME,YAAY,GAAG,EAArB;AAEA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBD,YAAyB;AAAA,MAAXE,MAAW;;AAC/C,UAAQA,MAAM,CAAChB,IAAf;AACE,SAAKJ,SAAL;AACE,aAAOoB,MAAM,CAACjB,MAAd;;AACF,SAAKF,YAAL;AACE,aAAOmB,MAAM,CAACjB,MAAd;;AACF;AACE,aAAOgB,KAAP;AANJ;AAQD,CATD","sourcesContent":["import { server } from './index';\nimport axios from 'axios'\nlet axiosConfig = {\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n    }\n}\n\n// Action Types\nconst GETBUDGET = 'GETBUDGET';\nconst UPDATEBUDGET = 'UPDATEBUDGET';\n\n// Action Creators\nconst getBudgetCreator = budget => ({ type: GETBUDGET, budget });\nconst updateBudgetCreator = budget => ({ type: UPDATEBUDGET, budget });\n\nexport const getBudget = userId => {\n  return async dispatch => {\n    try {\n      const resp = await axios.post(`${server}/api/budget/${userId}`,{public_token: token}, axiosConfig)\n      console.log(\"get budget\", resp.data)\n      //dispatch(getBudgetCreator(resp.data))\n    } catch(err) {\n      console.log('Error getting budget: ', err.message);\n    }\n  }\n}\n\nexport const updateBudget = budget => {\n  return async dispatch => {\n  try {\n      const resp = await axios.post(`${server}/api/budget`, {budget: budget}, axiosConfig)\n      console.log(\"update budget\", resp.data)\n      //dispatch(updateBudgetCreator(resp.data))\n    } catch(err) {\n      console.log('Error updating budget: ', err.message);\n    }\n  }\n}\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GETBUDGET:\n      return action.budget;\n    case UPDATEBUDGET:\n      return action.budget;\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}